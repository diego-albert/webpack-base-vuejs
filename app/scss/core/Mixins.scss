// centered no-repeat background
@mixin background-center-norepeat($size: cover) {
    background-size: $size;
    background-position: center;
    background-repeat: no-repeat;
}

// generic transform
@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

// pivot modifier
@mixin pivot ( $top, $left) {
    transform-origin: $top $left;
    -webkit-transform-origin:$top $left;
    -moz-transform-origin:$top $left;
    -o-transform-origin:$top $left;
    -ms-transform-origin:$top $left;
}

// rotate
@mixin rotateX ($deg) {
    @include transform(rotateX(#{$deg}deg));
}

// rotate
@mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
}
// scale
@mixin scale($scale) {
    @include transform(scale($scale));
}
// scale
@mixin scaleAxis($scaleX, $scaleY) {
    @include transform(scaleX($scaleX) scaleY($scaleY));
}
// translate
@mixin translate ($x, $y) {
    @include transform(translate($x, $y));
}
// translate
@mixin translate3D ($x, $y, $z) {
    @include transform(translate3d($x, $y, $z));
}
// skew
@mixin skew ($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}

// center X & Y
@mixin centerXY () {
    top: 50%;
    left: 50%;
    @include translate3D(-50%,-50%,0);
}

// center X
@mixin centerX () {
    left: 50%;
    @include translate3D(-50%,0,0);
}

// center Y
@mixin centerY () {
    top: 50%;
    @include translate3D(0,-50%,0);
}

//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
    -o-transform-origin: $origin;
    -ms-transform-origin: $origin;
    -webkit-transform-origin: $origin;
    transform-origin: $origin;

}

//transition
@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

//transition times
@mixin transition-duration ($times...) {
    moz-transition-duration: $times;
    -o-transition-duration: $times;
    -ms-transition-duration: $times;
    -webkit-transition-duration: $times;
    transition-duration: $times;
}

@mixin transition-delay ($times...) {
    moz-transition-delay: $times;
    -o-transition-delay: $times;
    -ms-transition-delay: $times;
    -webkit-transition-delay: $times;
    transition-delay: $times;
}

//transition
@mixin transition-transform( $args... ) {
    -webkit-transition: -webkit-transform $args;
    -moz-transition:    -moz-transform $args;
    -ms-transition:     -ms-transform $args;
    -o-transition:      -o-transform $args;
    transition:         transform $args;
}

//box-shadow
@mixin box-shadow( $x, $y, $spread ) {
    -webkit-box-shadow: $x $y $spread rgba(0,0,0,0.5);
    -moz-box-shadow: $x $y $spread rgba(0,0,0,0.5);
    box-shadow: $x $y $spread rgba(0,0,0,0.5);
}

@mixin box-shadow( $x, $y, $blur, $spread, $color ) {
    -webkit-box-shadow: $x $y $spread $color;
    -moz-box-shadow: $x $y $spread $color;
    box-shadow: $x $y $blur $spread $color;
}

// Text Styles
@mixin font-size($size, $lineheight){
    font-size: $size;
    line-height: $lineheight;
}

@mixin font-regular-sans(){
    font-family: 'supria_sans_regularregular';
    letter-spacing: 0.8px;
    font-weight: 100;
}

@mixin font-regular-sans-medium(){
    font-family: 'supria_sansmedium';
    letter-spacing: 0.2px;
    font-weight: 100;
}

@mixin font-light-sans(){
    font-family: 'supria_sanslight';
    letter-spacing: 0.1px;
    font-weight: 100;
}

@mixin font-bold-sans(){
    font-family: 'supria_sansbold';
    letter-spacing: 0.1px;
    font-weight: 300;
}

// Flex display
@mixin flex() {
    display: -webkit-box; /* OLD - iOS 6-, Safari 3.1-6 */
    display: -moz-box; /* OLD - Firefox 19- (buggy but mostly works) */
    display: -ms-flexbox; /* TWEENER - IE 10 */
    display: -webkit-flex; /* NEW - Chrome */
    display: flex;
}

@mixin flex-value($values) {
    -webkit-box-flex: $values;
    -moz-box-flex:  $values;
    -webkit-flex:  $values;
    -ms-flex:  $values;
    flex:  $values;
}

// Flex display
@mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

// Text not selectable
@mixin text-not-selectable {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

// absolute fullscreen
@mixin absolute-fullscreen {
    position: absolute;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
}

@mixin disable{
    @include transparent(50);
    cursor: default;
}

@mixin maintain-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));

  width: $width;
  height: 0;
  padding-bottom: $height;
}

@mixin respond-to($name) {
  @if map-has-key($breakpoints, $name) {
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.";
  }
}

// Image ratio
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}
